<%- include('sidepanel') -%>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">



<div class="text-center text-primary fw-bolder fs-3  mt-3">
  ADD PRODUCT
</div>


    <div class="container-fluid col-md-7 d-flex justify-content-center">



        <form class="mt-2 mb-5 bg-light p-4 rounded-3" action="/admin/addproduct" method="post" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="UrunID" class="form-label">Product Name</label>
                <input name="productname" type="text" class="form-control w-100" id="UrunID" required>
            </div>
            <div class="mb-3">
                <label class="form-label" for="UrunMiktar">category</label>
                <select name="category" class="form-select w-100">

                              
                  
                  </select>
            </div>
            <div class="mb-3">
                <label class="form-label" for="UrunMiktar">Price</label>
                <input name="price" min="1" type="number" class="form-control w-100" required>
                <span id="priceValidationMessage" style="color: red;"></span>

            </div>
           
            <div class="mb-3">
                <label for="Kategori" class="form-label">Model</label>
                <input name="model" type="text" class="form-control w-100" required>
            </div>
            <div class="mb-3">
                <label for="Kategori" class="form-label">Description</label>
                <input name="description" type="text" class="form-control w-100" required>
            </div>
            <div class="mb-3">
                <label for="Kategori" class="form-label">stock</label>
                <input name="stock" min="1" type="number" class="form-control w-100" required >
            </div>
            <div class="mb-3">
                <label for="UrunImage" class="form-label">Product Image</label>
                <input name="img" type="file"  multiple class="form-control w-100" id="image" >
                <div id="image-container" class="mb-5 mt-5"></div> 
                <div id="cropper-container" class="mt-3 mb-5"></div>
                <br>  <span id="validationMessage" style="color: red;"></span>

               

            </div>
            <div class="d-flex justify-content-center">
                <button type="submit"
                    class="btn btn-success text-white w-100  mb-5 btn-submit">Add Stock</button>
            </div>
        </form>



        

        
        
       
        <script>



          const imageContainer = document.getElementById('image-container');
          let croppers = [];
          let croppedImagesData = []; // Array to store cropped image data
          let isSaveClicked = false; // Flag to track if the Save button is clicked
        
          document.getElementById('image').addEventListener('change', (event) => {
            const files = event.target.files;
        
            for (const file of files) {
              const reader = new FileReader();
        
              reader.onload = (event) => {
                const image = new Image();
                image.src = event.target.result;
        
                image.onload = () => {
                  const containerDiv = document.createElement('div');
                  containerDiv.className = 'image-container';
        
                  const imageElement = document.createElement('img');
                  imageElement.src = image.src;
                  containerDiv.appendChild(imageElement);
        
                  // Set a fixed height for the container
                  containerDiv.style.height = '150px';
        
                  // Create a new Cropper for each image without a fixed aspect ratio
                  const cropper = new Cropper(imageElement, {
                    aspectRatio: NaN, // Allow freeform cropping
                    viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
                  });
        
                  // Create a "Save" button for each image
                  const saveButton = document.createElement('button');
                  saveButton.className = 'btn btn-success save-button';
                  saveButton.textContent = 'Save';
                  saveButton.addEventListener('click', () => {
                    // Get the cropped image data for the specific cropper
                    const croppedCanvas = cropper.getCroppedCanvas();
                    const croppedImageData = croppedCanvas.toDataURL('image/jpeg');
        
                    // Store cropped image data in the array
                    croppedImagesData.push(croppedImageData);
        
                    // Optionally, you can remove the "Save" button after saving
                    containerDiv.removeChild(saveButton);
        
                    // Set the flag to indicate that Save button is clicked
                    isSaveClicked = true;
                  });
        
                  // Create a "Remove" button for each image
                  const removeButton = document.createElement('button');
                  removeButton.className = 'btn btn-danger remove-button';
                  removeButton.textContent = 'Remove';
                  removeButton.addEventListener('click', () => {
                    // Remove the corresponding image and cropper
                    const index = croppers.indexOf(cropper);
                    if (index !== -1) {
                      croppers.splice(index, 1);
                      croppedImagesData.splice(index, 1);
                    }
                    containerDiv.remove();
        
                    // Reset the flag if there are no images left
                    if (croppers.length === 0) {
                      isSaveClicked = false;
                    }
                  });
        
                  containerDiv.appendChild(saveButton);
                  containerDiv.appendChild(removeButton);
        
                  imageContainer.appendChild(containerDiv);
                  croppers.push(cropper);
                };
              };
        
              reader.readAsDataURL(file);
            }
          });
        
          // Handle form submission (for adding product)
          document.querySelector('form').addEventListener('submit', async (event) => {
            // Prevent form submission if Save button is not clicked
            if (!isSaveClicked) {
              event.preventDefault();
              // Show validation message
              document.getElementById('validationMessage').textContent = 'Please save the image first.';
            } else {
              // Add the cropped image data to the form data
              croppedImagesData.forEach((croppedImageData, index) => {
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = `croppedImages[${index}]`;
                hiddenInput.value = croppedImageData;
                document.querySelector('form').appendChild(hiddenInput);
              });
        
              // Optionally, you can also reset the croppers and image containers
              resetCroppersAndContainers();
            }
          });
        
          // Function to reset croppers and containers
          function resetCroppersAndContainers() {
            // Reset the croppers array
            croppers = [];
        
            // Remove all child elements from the imageContainer
            while (imageContainer.firstChild) {
              imageContainer.removeChild(imageContainer.firstChild);
            }
        
            // Clear the file input
            const fileInput = document.getElementById('image');
            fileInput.value = '';
        
            // Clear the cropped image data array
            croppedImagesData = [];
        
            // Reset the Save button click flag
            isSaveClicked = false;
        
            // Clear the validation message
            document.getElementById('validationMessage').textContent = '';
          }



  //         document.getElementById('priceInput').addEventListener('input', function () {
  //   // Get the current value of the price input
  //   const priceValue = parseFloat(this.value);

  //   // Check if the value is less than 1
  //   if (isNaN(priceValue) || priceValue < 1) {
  //     // Display an error message
  //     document.getElementById('priceValidationMessage').textContent = 'Price must be greater than or equal to 1';
  //   } else {
  //     // Clear the error message if the value is valid
  //     document.getElementById('priceValidationMessage').textContent = '';
  //   }
  // });




        </script>
        
        
        
        




    <style>
      .image-container {
        display: inline-block;
        margin-right: 10px;
      }
    
      .image-container img {
        max-width: 100%;
        height: auto;
      }

      .remove-button {
    display: block;
    margin-top: 5px;
    cursor: pointer;
    color: red;
    color: aliceblue;
    width: 16vh;
  }


  
  .save-button {
    display: block;
    margin-top: 5px;
    width: 16vh;

  }
    </style>

    




   

        


















<!--  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    
<script src="https://kit.fontawesome.com/3da5cff3a5.js" crossorigin="anonymous"></script> -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script> -->


    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://kit.fontawesome.com/3da5cff3a5.js" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/cropperjs"></script>
    <link rel="stylesheet" href="https://unpkg.com/cropperjs/dist/cropper.css"> 


      <style>  #image-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
    }

    .image-container {
        position: relative;
        display: inline-block; /* To avoid the container collapsing */
    }

    .imagePreview {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border: 1px solid #ccc;
        margin-right: 10px;
    }

    .deleteIcon {
        position: absolute;
        bottom: 90px;
        right: 1px;
        cursor: pointer;
        color: red;
        font-size: 18px;
    }
</style>
    <body>
      <%-include('sidepanel')%>
   <nav class="navbar navbar-expand navbar-light bg-light">
     <div class="container-sm">
          <a class="navbar-brand" href="/admin/dashboard">TJ Watches </a>
          <div class="navcontent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0 d-flex justify-content-center">
              <li class="nav-item border border-2 ps-3 pe-3">
                <a class="nav-link active fs-7" aria-current="page" href="#">Add Products</a>
              </li>
            </ul>
        </div> 
        <button class="btn btn-success ps-5 pe-5 pt-2 pb-2" onclick=>Logout</button> 
        </div>
      </nav>

<div class="container  border mt-5 " style="width: 60%;font-weight: 400;font-size: larger;" id="form">
      <form class="mt-5" action="/admin/addproduct" method="POST" enctype="multipart/form-data">

        <div class="mb-3">
          <label for="UrunID" class="form-label">Category</label>
            <div id="categoryError" class="invalid-feedback" style="display: none;"></div>
   
          <select id="selectOption" name="category" class="selectoption" >
            <option >Select</option>
            <% categorydetails.forEach(function(category) { %>

            <option value="<%= category.categoryname %>"><%= category.categoryname %></option>
            <% }); %>
            <option value="Women">Women</option> -->
          <!-- </select> -->
         
        <!-- </div>
        <div class="mb-3">
          <label for="UrunAdi" class="form-label">Description</label>
          <input type="text" class="form-control" name="description" id="UrunAdi">
        </div>
        <div class="mb-3">
          <label class="form-label" for="UrunMiktar">Name</label>
          <input type="text" class="form-control" name="name"id="UrunMiktar" >
        </div>
        <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Price</label>
            <input type="number" class="form-control" name="price" id="Price">
            <div id="priceError" class="invalid-feedback" style="display: none;"></div>

          </div>
          <div class="mb-3">  
            <label class="form-label" for="UrunMiktar">Rating</label>
            <select id="selectOption" name="rating" class="selectoption" >
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>

            </select>   </div>
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Brand</label>
            <select id="selectOption" name="brand" class="selectoption" >
              <option >Select</option>
              <option value="Rolex">Rolex</option>
              <option value="Hublot">Hublot</option>
              <option value="Seiko">Seiko</option>
              <option value="GC">GC</option>
              <option value="Guess">Guess</option>
              <option value="Timex">Timex</option>

            </select>  </div>
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Size in mm</label>
            <select id="selectOption" name="size" class="selectoption" >
              <option >Select</option>
              <option value="37">37</option>
              <option value="40">40</option>
              <option value="43">43</option>
              <option value="46">46</option>

            </select></div>
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Dial Shape</label>
            <select id="selectOption" name="dialshape" class="selectoption" >
              <option >Select</option>
              <option value="Round">Round</option>
              <option value="Rectangle">Rectangle</option>
            </select> </div>
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Quantity</label>
            <input type="number" class="form-control" name="quantity" id="Quantity">
            <div id="quantityError" class="invalid-feedback" style="display: none;"></div>

          </div>

          <div class="mb-3">
            <label for="UrunImage" class="form-label">Product Image</label>
            <input name="imgs" type="file" multiple class="form-control" id="images" multiple> 
            <div id="image-container" class="mt-5 ms-5"></div>
             <div id="close-container" class="mt-3"></div> -->

        <!-- </div>
        
        <div class="form-group">
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-success text-white btn-outline-success form-control w-50 m-3" id="ekleButton" style="height: auto">Add Product</button>
            </div>
        </div>
        
        <script>
          const selectedFiles = [];
           document.getElementById('images').addEventListener('change', function () {
        const previewContainer = document.getElementById('image-container');
        previewContainer.innerHTML = '';

        
        selectedFiles.length = 0;

        Array.from(this.files).forEach(file => {
            const fileName = file.name;
            const imgContainer = document.createElement('div');
            imgContainer.className = 'image-container';

            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            img.alt = fileName;
            img.className = 'imagePreview';

            const deleteIcon = document.createElement('span');
            deleteIcon.innerHTML = '&times;';
            deleteIcon.className = 'deleteIcon';

            deleteIcon.addEventListener('click', function () {
                imgContainer.remove();
                const index = selectedFiles.indexOf(file);
                if (index !== -1) {
                    selectedFiles.splice(index, 1);
                }
            });

            imgContainer.appendChild(img);
            imgContainer.appendChild(deleteIcon);
            previewContainer.appendChild(imgContainer);

            // Add the file to selectedFiles array
            selectedFiles.push(file); -->
        <!-- }); -->
    <!-- }); -->
            <!-- // document.getElementById('images').addEventListener('change', function(event) {
            //     const files = event.target.files;
            //     const imageContainer = document.getElementById('image-container');
            //     const closeContainer = document.getElementById('close-container');

        
            //     // Clear previous previews
            //     imageContainer.innerHTML = '';
            //     closeContainer.innerHTML = '';

        
            //     for (let i = 0; i < files.length; i++) {
            //         const reader = new FileReader();
            //         const imageContainerItem = document.createElement('div');
            //         const image = document.createElement('img');
            //         const closeButton = document.createElement('button');
        
            //         reader.onload = function(e) {
            //             image.src = e.target.result;
            //             image.style.width = '20%';
            //             image.style.height = '20%';
            //             image.style.margin = '1%';
        
            //             closeButton.innerHTML = '✖'; // Close button content (you can change it)
            //             closeButton.style.position = 'absolute';
            //             closeButton.style.top = '0';
            //             closeButton.style.right = '0';
            //             closeButton.style.background = 'red'; // Added a background color for better visibility
            //             closeButton.style.border = 'none';
            //             closeButton.style.color = 'white';
            //             closeButton.style.cursor = 'pointer';
        
            //             closeButton.addEventListener('click', function() {
            //                 // Remove the image and update the count
            //                 imageContainer.removeChild(imageContainerItem);
            //             });
        
            //             // Append image and close button to the container item
            //             imageContainerItem.appendChild(image);
            //             imageContainerItem.appendChild(closeButton);
        
            //             // Append the container item to the main container
            //             imageContainer.appendChild(imageContainerItem);
            //         };
        
            //         reader.readAsDataURL(files[i]);
            //     }
            // });
        
            // // Add event delegation for image deletion
            // document.getElementById('image-container').addEventListener('click', function(event) {
            //     if (event.target.tagName === 'BUTTON') {
            //         // Remove the container item (which includes the image and close button)
            //         event.target.parentNode.parentNode.removeChild(event.target.parentNode);
            //     }
            // });

        </script>
         -->




          <!-- <div class="mb-3">
            <label for="UrunImage" class="form-label">Product Image</label>
            <input name="images" type="file" multiple class="form-control" id="images" multiple> 
            <div id="image-container" class="mt-5 ms-5"></div>
        </div>
        
        <div class="form-group">
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-success text-white btn-outline-success form-control w-50 m-3" id="ekleButton" style="height: auto">Add Product</button>
            </div>
        </div>
        
        <script>
            document.getElementById('images').addEventListener('change', function(event) {
                const files = event.target.files;
                const imageContainer = document.getElementById('image-container');
        
                // Clear previous previews
                imageContainer.innerHTML = '';
        
                for (let i = 0; i < files.length; i++) {
                    const reader = new FileReader();
                    const image = document.createElement('img');
        
                    reader.onload = function(e) {
                        image.src = e.target.result;
                        image.style.width = '20%';
                        image.style.height = '20%';
                        image.style.margin = '1%';
        
                        // Append image to the container
                        imageContainer.appendChild(image);
                    };
        
                    reader.readAsDataURL(files[i]);
                }
            });
        
            // Add event delegation for image deletion
            document.getElementById('image-container').addEventListener('click', function(event) {
                if (event.target.tagName === 'IMG') {
                    // Remove the clicked image
                    event.target.parentNode.removeChild(event.target);
                }
            });
        </script> -->
        

<script>


        // Initialize Cropper for the image
        // const cropper = new Cropper(image, {
        //   aspectRatio: 1, // Set the aspect ratio as needed
        //   viewMode: 2, // Adjust the view mode as needed
        //   autoCropArea: 1, // Set the initial cropped area size (1 = 100%)
        //   responsive: true, // Enable responsive rendering
        // });


        // Create Crop button for each image
        // const cropButton = document.createElement('button');
        // cropButton.textContent = 'Crop';
        // cropButton.addEventListener('click', function() {
        //   const canvas = cropper.getCroppedCanvas();
        //   const croppedImage = document.createElement('img');
        //   croppedImage.src = canvas.toDataURL();
        //   imageContainer.innerHTML = ''; // Clear previous previews
        //   imageContainer.appendChild(croppedImage);
          
          // Store cropped data on form submission
        //   document.getElementById('ekleButton').addEventListener('click', function(event) {
        //     const blob = canvas.toBlob(function(blob) {
        //       const formData = new FormData();
        //       formData.append('croppedImage', blob, 'cropped_image.jpg');
              
        //       // Append other form data fields if needed
        //       formData.append('field_name', field_value);

        //       // Send the FormData object to the server via Fetch or XMLHttpRequest
        //       fetch('/admin/addproduct', {
        //         method: 'POST',
        //         body: formData,
        //       })
        //       .then(response => {
        //         // Handle the response here
        //         console.log('Image uploaded successfully');
        //       })
        //       .catch(error => {
        //         // Handle errors here
        //         console.error('Error uploading image:', error);
        //       });
        //     });
        //   });
        // });

      //   imageContainer.appendChild(cropButton);
      // };

  //     reader.readAsDataURL(files[i]);
  //   }
  // }); 











  

  ////Validation for quantity and price to be number and greater than 0
//  document.addEventListener('DOMContentLoaded', function () {
//     const form = document.querySelector('form');

//     form.addEventListener('submit', function (event) {
//       let isValid = true;

//       // Check Price
//       const price = parseFloat(document.getElementById('Price').value);
//       if (isNaN(price) || price <= 0) {
//         displayError('Enter a valid price greater than 0', 'Price');
//         isValid = false;
//       }

//       // Check Quantity
//       const quantity = parseFloat(document.getElementById('Quantity').value);
//       if (isNaN(quantity) || quantity <= 0) {
//         displayError('Enter a valid quantity greater than 0', 'Quantity');
//         isValid = false;
//       }

//       if (!isValid) {
//         event.preventDefault(); // Prevent form submission if validation fails
//       }
//     });

//     function displayError(message, elementId) {
//       const errorDiv = document.createElement('div');
//       errorDiv.className = 'invalid-feedback';
//       errorDiv.innerHTML = message;

//       const element = document.getElementById(elementId);
//       element.classList.add('is-invalid');
//       element.parentNode.appendChild(errorDiv);
//     }
//   });

  /////Add the preview of the product added
  // document.getElementById('images').addEventListener('change', function (event) {
  // const imageContainer = document.getElementById('image-container');
  // imageContainer.innerHTML = ''; // Clear previous images

  // const files = event.target.files;
  // if (!files || files.length === 0) {
  //   return;
  // }

  // Display uploaded images
  // for (const file of files) {
  //   const reader = new FileReader();

  //   reader.onload = function (e) {
  //     const imageElement = document.createElement('img');
  //     imageElement.src = e.target.result;
  //     imageElement.classList.add('img-thumbnail', 'm-2', 'preview-image');
  //     imageElement.style.maxWidth = '10%px'; // Set the maximum width for the preview image
  //     imageElement.style.maxHeight = '10%'; // Set the maximum height for the preview image
  //     imageContainer.appendChild(imageElement);
  //   };

  //   reader.readAsDataURL(file);
  // }
// });










</script> 


<!-- <script>
  let cropper;
  let input = document.getElementById("imageInput");
  let imageContainer = document.getElementById("imageContainer");


  document.getElementById("addProductButton").addEventListener("click", function (event) {
      event.preventDefault();

      if (cropper) {
          const canvasData = cropper.getCroppedCanvas();
          if (canvasData) {
              canvasData.toBlob(function (blob) {
                  const formData = new FormData();
                  formData.append("image", blob, "cropped-image.png");

                  // Append other form data
                  formData.append("productname", document.getElementById("UrunID").value);
                  formData.append("price", document.getElementById("UrunAdi").value);
                  formData.append("rating", document.getElementById("UrunMiktar").value);
                  formData.append("model", document.getElementById("UrunAdii").value);
                  formData.append("description", document.getElementById("UrunAdiii").value);
                  formData.append("category", document.getElementById("options").value);
                  formData.append("stock", document.getElementById("UrunAdiiii").value);

                  const xhr = new XMLHttpRequest();
                  xhr.open("POST", "/admin/addproduct", true);
                  xhr.onload = function () {
                      if (xhr.status === 200) {
                          console.log("Product added successfully");
                          // Redirect to the previous page
                          window.location.href = "/admin/homee";
                      } else {
                          console.error("Error adding product:", xhr.statusText);
                      }
                  };
                  xhr.onerror = function () {
                      console.error("Network error");
                  };
                  xhr.send(formData);
              });
          }
      }
  });
</script> -->
<!-- </body> -->