<!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    
<script src="https://kit.fontawesome.com/3da5cff3a5.js" crossorigin="anonymous"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>


    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://kit.fontawesome.com/3da5cff3a5.js" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/cropperjs"></script>
    <link rel="stylesheet" href="https://unpkg.com/cropperjs/dist/cropper.css"> 


      <style>  #image-container {
        display: flex;
        width: 100px;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
    }

    .image-container {
        position: relative;
        width: 100px;
        display: inline-block; /* To avoid the container collapsing */
    }

    .imagePreview {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border: 1px solid #ccc;
        margin-right: 10px;
    }

    .deleteIcon {
        position: absolute;
        bottom: 90px;
        right: 1px;
        cursor: pointer;
        color: red;
        font-size: 18px;
    }
</style>
    <body>
      <%-include('sidepanel')%>
   <nav class="navbar navbar-expand navbar-light bg-light">
     <div class="container-sm">
          <a class="navbar-brand" href="/admin/dashboard">TJ Watches </a>
          <div class="navcontent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0 d-flex justify-content-center">
              <li class="nav-item border border-2 ps-3 pe-3">
                <a class="nav-link active fs-7" aria-current="page" href="#">Add Products</a>
              </li>
            </ul>
        </div> 
        <button class="btn btn-success ps-5 pe-5 pt-2 pb-2" onclick=>Logout</button> 
        </div>
      </nav>

<div class="container  border mt-5 " style="width: 60%;font-weight: 400;font-size: larger;" id="form">
      <form class="mt-5" action="/admin/addproduct" method="POST" enctype="multipart/form-data">

        <div class="mb-3">
          <label for="UrunID" class="form-label">Category</label>
            <div id="categoryError" class="invalid-feedback" style="display: none;"></div>
   
          <select id="selectOption" name="category" class="selectoption" >
            <option >Select</option>
            <% categories.forEach(function(category) { %>

            <option value="<%= category.categoryname %>"><%= category.categoryname %></option>
            <% }); %>
            <!-- <option value="Women">Women</option> -->
          </select>
         
        </div>
        <div class="mb-3">
          <label for="UrunAdi" class="form-label">Description</label>
          <input type="text" class="form-control" name="description" id="UrunAdi">
        </div>
        <div class="mb-3">
          <label class="form-label" for="UrunMiktar">Name</label>
          <input type="text" class="form-control" name="name"id="UrunMiktar" >
        </div>
        <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Price</label>
            <input type="number" class="form-control" name="price" id="Price">
            <div id="priceError" class="invalid-feedback" style="display: none;"></div>

          </div>
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Offer Price</label>
            <input type="number" class="form-control" name="offerprice" id="OfferPrice" value="0">
            <div id="offerpriceError" class="invalid-feedback" style="display: none;"></div>

          </div>
          <!-- <div class="mb-3">  
            <label class="form-label" for="UrunMiktar">Rating</label>
            <select id="selectOption" name="rating" class="selectoption" >
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>

            </select>   </div> -->
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Brand</label>
            <select id="selectOption" name="brand" class="selectoption" >
              <option >Select</option>
              <option value="Rolex">Rolex</option>
              <option value="Hublot">Hublot</option>
              <option value="Seiko">Seiko</option>
              <option value="GC">GC</option>
              <option value="Guess">Guess</option>
              <option value="Timex">Timex</option>

            </select>  
          </div>
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Size in mm</label>
            <select id="selectOption" name="size" class="selectoption" >
              <option >Select</option>
              <option value="37">37</option>
              <option value="40">40</option>
              <option value="43">43</option>
              <option value="46">46</option>

            </select></div>
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Dial Shape</label>
            <select id="selectOption" name="dialshape" class="selectoption" >
              <option >Select</option>
              <option value="Round">Round</option>
              <option value="Rectangle">Rectangle</option>
            </select> </div>
          <div class="mb-3">
            <label class="form-label" for="UrunMiktar">Quantity</label>
            <input type="number" class="form-control" name="quantity" id="Quantity">
            <div id="quantityError" class="invalid-feedback" style="display: none;"></div>

          </div>

          <!-- <div class="mb-3">
            <label for="UrunImage" class="form-label">Product Image</label>
            <input name="images" type="file" multiple class="form-control" id="images" multiple> 
            <div id="image-container" class="mt-5 ms-5"></div>
            <div id="close-container" class="mt-3"></div>

        </div>
         -->
         <div class="form-group">
          <label for="stock">Image:</label>
          
          <!-- <input type="file" accept="image/*" class="form-control" id="img" name="img" multiple onchange="previewimg(event)"> -->
          <input type="file" accept="image/*" class="form-control" id="img" name="img" multiple onchange="previewAndCropImages(event)">
          <span id="imageError" class="text-danger"></span>
          <div class="container d-flex">
            <div id="image-container" class="mt-5 ms-5 mb-5"></div>
            <div id="cropper-container" class="mt-3 mb-5"></div>
          </div>
        <!-- </div> -->

        <div class="form-group">
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-success text-white btn-outline-success form-control w-50 m-3" id="ekleButton" style="height: auto">Add Product</button>
            </div>
        </div>
        
        <script>
          const imageContainer = document.getElementById('image-container');
          let croppers = [];
          let croppedImagesData = []; // Array to store cropped image data
      
          document.getElementById('img').addEventListener('change', (event) => {
            const files = event.target.files;
      
            for (const file of files) {
              const reader = new FileReader();
      
              reader.onload = (event) => {
                const image = new Image();
                image.src = event.target.result;
      
                image.onload = () => {
                  const containerDiv = document.createElement('div');
                  containerDiv.className = 'image-container';
      
                  const imageElement = document.createElement('img');
                  imageElement.src = image.src;
                  containerDiv.appendChild(imageElement);
      
                  // Set a fixed height for the container
                  containerDiv.style.height = '150px';
      
                  // Create a new Cropper for each image without a fixed aspect ratio
                  const cropper = new Cropper(imageElement, {
                    aspectRatio: NaN, // Allow freeform cropping
                    viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
                  });
      
                  // Create a "Save" button for each image
                  const saveButton = document.createElement('button');
                  saveButton.className = 'btn btn-success save-button';
                  saveButton.textContent = 'Save';
                  saveButton.addEventListener('click', () => {
                    // Get the cropped image data for the specific cropper
                    const croppedCanvas = cropper.getCroppedCanvas();
                    const croppedImageData = croppedCanvas.toDataURL('image/jpeg');
      
                    // Store cropped image data in the array
                    croppedImagesData.push(croppedImageData);
      
                    // Optionally, you can remove the "Save" button after saving
                    containerDiv.removeChild(saveButton);
                  });
                  // Create a "Remove" button for each image
                  const removeButton = document.createElement('button');
                  removeButton.className = 'btn btn-danger remove-button';
                  removeButton.textContent = 'Remove';
                  removeButton.addEventListener('click', () => {
                    // Remove the corresponding image and cropper
                    const index = croppers.indexOf(cropper);
                    if (index !== -1) {
                      croppers.splice(index, 1);
                      croppedImagesData.splice(index, 1);
                    }
                    containerDiv.remove();
                  });
      
                  containerDiv.appendChild(saveButton);
                  containerDiv.appendChild(removeButton);
      
                  imageContainer.appendChild(containerDiv);
                  croppers.push(cropper);
                };
              };
      
              reader.readAsDataURL(file);
            }
          });
      
          // Handle form submission (for adding product)
          document.querySelector('form').addEventListener('submit', async (event) => {
            // Add the cropped image data to the form data
            croppedImagesData.forEach((croppedImageData, index) => {
              const hiddenInput = document.createElement('input');
              hiddenInput.type = 'hidden';
              hiddenInput.name = `croppedImages[${index}]`;
              hiddenInput.value = croppedImageData;
              document.querySelector('form').appendChild(hiddenInput);
            });
      
          });
      
      
        </script>
         <script>
        
//     const imageContainer = document.getElementById('image-container');
//     let croppers = [];
//     let croppedImagesData = []; // Array to store cropped image data

//     function previewAndCropImages(event) {
//       const files = event.target.files;

//       for (const file of files) {
//         const reader = new FileReader();

//         reader.onload = (event) => {
//           const image = new Image();
//           image.src = event.target.result;

//           image.onload = () => {
//             const containerDiv = document.createElement('div');
//             containerDiv.className = 'image-container';

//             const imageElement = document.createElement('img');
//             imageElement.src = image.src;
//             containerDiv.appendChild(imageElement);

//             // Set a fixed height for the container
//             containerDiv.style.height = '150px';

//             // Create a new Cropper for each image without a fixed aspect ratio
//             const cropper = new Cropper(imageElement, {
//               aspectRatio: NaN, // Allow freeform cropping
//               viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
//             });

//             // Create a "Save" button for each image
//             const saveButton = document.createElement('button');
//             saveButton.className = 'btn btn-success save-button';
//             saveButton.textContent = 'Save';
//             saveButton.addEventListener('click', () => {
//               // Get the cropped image data for the specific cropper
//               const croppedCanvas = cropper.getCroppedCanvas();
//               const croppedImageData = croppedCanvas.toDataURL('image/jpeg');

//               // Store cropped image data in the array
//               croppedImagesData.push(croppedImageData);

//               // Optionally, you can remove the "Save" button after saving
//               containerDiv.removeChild(saveButton);
//             });
//             const removeButton = document.createElement('button');
//             // removeButton.className = 'btn btn-danger remove-button';
//             // removeButton.textContent = 'Remove';
           
//             // Create a "Remove" button for each image
//             // const removeButton = document.createElement('button');
//             // removeButton.className = 'btn btn-danger remove-button';
//             // removeButton.textContent = 'Remove';
//             // removeButton.addEventListener('click', () => {
//             //   // Remove the corresponding image and cropper
//             //   const index = croppers.indexOf(cropper);
//             //   if (index !== -1) {
//             //     croppers.splice(index, 1);
//             //     croppedImagesData.splice(index, 1);
//             //   }
//             //   containerDiv.remove();
//             // });
//  containerDiv.appendChild(saveButton);
//               containerDiv.appendChild(removeButton);

//               imageContainer.appendChild(containerDiv);
//               croppers.push(cropper);
//             // containerDiv.appendChild(saveButton);
//             // containerDiv.appendChild(removeButton);

//             // imageContainer.appendChild(containerDiv);
//             // croppers.push(cropper);
//           };
//         };

//         reader.readAsDataURL(file);
//       }
//     };

    // Handle form submission (for adding product)
    // document.querySelector('form').addEventListener('submit', async (event) => {
    //   // Add the cropped image data to the form data
    //   croppedImagesData.forEach((croppedImageData, index) => {
    //     const hiddenInput = document.createElement('input');
    //     hiddenInput.type = 'hidden';
    //     hiddenInput.name = `croppedImages[${index}]`;
    //     hiddenInput.value = croppedImageData;
    //     document.querySelector('form').appendChild(hiddenInput);
    //   });

    // });


 
        


    
  ////Validation for quantity and price to be number and greater than 0
 document.addEventListener('DOMContentLoaded', function () {
    const form = document.querySelector('form');

    form.addEventListener('submit', function (event) {
      let isValid = true;

      // Check Price
      const price = parseFloat(document.getElementById('Price').value);
      if (isNaN(price) || price <= 0) {
        displayError('Enter a valid price greater than 0', 'Price');
        isValid = false;
      }

      // Check Quantity
      const quantity = parseFloat(document.getElementById('Quantity').value);
      if (isNaN(quantity) || quantity <= 0) {
        displayError('Enter a valid quantity greater than 0', 'Quantity');
        isValid = false;
      }

      if (!isValid) {
        event.preventDefault(); // Prevent form submission if validation fails
      }
    });

    function displayError(message, elementId) {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'invalid-feedback';
      errorDiv.innerHTML = message;

      const element = document.getElementById(elementId);
      element.classList.add('is-invalid');
      element.parentNode.appendChild(errorDiv);
    }
  });


</script> 



</body>