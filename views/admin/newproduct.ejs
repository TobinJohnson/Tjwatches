<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<style>
    #image-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

#image-container img {
  max-width: 200px;
  max-height: 200px;
  object-fit: cover;
}

canvas {
  display: none; /* Initially hide the canvas */
  border: 1px solid #ccc;
}

  </style>
</head>
<div class="row">
  <!-- Sidebar -->
  <ul
    class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion"
    id="accordionSidebar"
  >
    <!-- Sidebar - Brand -->
    <a
      class="sidebar-brand d-flex align-items-center justify-content-center"
      href="#"
    >
      <div class="sidebar-brand-icon rotate-n-15">
        <i class="fas fa-laugh-wink"></i>
      </div>
      <div class="sidebar-brand-text mx-3">Admin Panel</div>
    </a>

    <!-- Divider -->
    <hr class="sidebar-divider my-0" />

    <!-- Nav Item - Dashboard -->
    <li class="nav-item active">
      <a class="nav-link" href="#">
        <i class="fas fa-fw fa-tachometer-alt"></i>
        <span>Dashboard</span></a
      >
    </li>

    <!-- Divider -->
    <hr class="sidebar-divider" />

    <!-- Heading -->
    <div class="sidebar-heading">Interface</div>

    <!-- Nav Item - User Management -->
    <li class="nav-item">
      <a class="nav-link" href="/usermanagement">
        <i class="fas fa-user"></i>
        <span>User Management</span>
      </a>
    </li>

    <!-- Nav Item - Category Management -->
    <li class="nav-item">
      <a class="nav-link" href="/categorymanagement">
        <i class="fas fa-sitemap"></i>
        <span>Category Management</span>
      </a>
    </li>

    <!-- Nav Item - Product Management -->
    <li class="nav-item">
      <a class="nav-link" href="/productlisting">
        <i class="fas fa-shopping-cart"></i>
        <span>Product Management</span>
      </a>
    </li>

    <!-- Nav Item - Order management -->
    <li class="nav-item">
      <a class="nav-link" href="/orderManagement">
        <i class="fas fa-truck"></i>
        <span>Order Management</span>
      </a>
    </li>
    <!-- Nav Item - Coupen management -->
    <li class="nav-item">
      <a class="nav-link" href="/offerManagement">
        <i class="fas fa-tags"></i>
        <span>Offer Management</span>
      </a>
    </li>

   
    <!-- Nav Item - Report -->
    <li class="nav-item">
      <a class="nav-link" href="/salesReport">
        <i class="fas fa-chart-pie"></i>
        <span>Sales Report</span>
      </a>
    </li>
    <!-- Nav Item - LogOut -->
    <li class="nav-item">
      <a class="nav-link" href="/adminlogout">
        <i class="fas fa-sign-out-alt"></i>
        <span>Logout</span>
      </a>
    </li>
  </ul>
  <!-- End of Sidebar -->

  <!-- Start of Form -->
  <!-- Form -->
  <div
    class="col-9 d-flex justify-content-center align-items-center"
    style="height: 100vh; margin-top: 130px;"
  >
    <form
   action="/addproduct"
      method="post"
      enctype="multipart/form-data"
      class="needs-validation"
      novalidate
 
    >
      <div class="form-group">
        <label for="Productname">Product Name:</label>
        <input
          type="text"
          id="Productname"
          name="Productname"
          class="form-control"
          required
        />
      </div>
    



      <div class="form-group">
        <label for="Price">Price:</label>
        <input
          type="number"
          id="Price"
          name="Price"
          class="form-control"
          required
        />
       
      </div>
      <div class="form-group">
        <label for="Rating">Rating:</label>
        <input
          type="number"
          id="Rating"
          name="Rating"
          class="form-control"
          required
        />
       
      </div>
      <div class="form-group">
        <label for="Model">Model:</label>
        <input
          type="text"
          id="Model"
          name="Model"
          class="form-control"
          required
        />
       
      </div>
      <div class="form-group">
        <label for="Description">Description:</label>
        <textarea
          id="Description"
          name="Description"
          class="form-control"
          rows="3"
          required
        ></textarea>
       
      </div>

      <div class="form-group">
        <label for="Stock">Stock</label>
        <input
          type="number"
          id="Stock"
          name="Stock"
          class="form-control"
          required
        />
       
      </div>
      <div class="mb-3">
        <label for="UrunImage" class="form-label">Product Image</label>
        <input name="img" type="file"  multiple class="form-control" id="image" required>
        <div id="image-container" class="mt-5 ms-5"></div>
        <div id="cropper-container" class="mt-3"></div>
    </div>
    
 
      <div class="form-group form-check" style="margin-top: 70px;">
        <input
          type="checkbox"
          id="isListed"
          name="isListed"
          class="form-check-input"
          required
        />
        <label  class="form-check-label" for="isListed">Is Listed:</label>
       
      </div>
      <a href="/productlisting" class="btn btn-primary w-100 mt-2">Go Back</a>
      <div class="form-group">
        <br>
        <input type="submit" value="Submit" class="btn btn-primary" />
      </div>
    </form>
  </div>
</div>

<!-- Image Cropping and Preview -->
<script>
  const imageContainer = document.getElementById('image-container');
  let croppers = [];
  let croppedImagesData = []; // Array to store cropped image data

  document.getElementById('image').addEventListener('change', (event) => {
    const files = event.target.files;

    for (const file of files) {
      const reader = new FileReader();

      reader.onload = (event) => {
        const image = new Image();
        image.src = event.target.result;

        image.onload = () => {
          const containerDiv = document.createElement('div');
          containerDiv.className = 'image-container';

          const imageElement = document.createElement('img');
          imageElement.src = image.src;
          containerDiv.appendChild(imageElement);

          // Set a fixed height for the container
          containerDiv.style.height = '150px';

          // Create a new Cropper for each image without a fixed aspect ratio
          const cropper = new Cropper(imageElement, {
            aspectRatio: NaN, // Allow freeform cropping
            viewMode: 1, // Set the cropping mode (0: freeform, 1: restrict to the aspect ratio)
          });

          // Create a "Save" button for each image
          const saveButton = document.createElement('button');
          saveButton.className = 'btn btn-success save-button';
          saveButton.textContent = 'Save';
          saveButton.addEventListener('click', () => {
            // Get the cropped image data for the specific cropper
            const croppedCanvas = cropper.getCroppedCanvas();
            const croppedImageData = croppedCanvas.toDataURL('image/jpeg');

            // Store cropped image data in the array
            croppedImagesData.push(croppedImageData);

            // Optionally, you can remove the "Save" button after saving
            containerDiv.removeChild(saveButton);
          });
            // Create a "Remove" button for each image
            const removeButton = document.createElement('button');
            removeButton.className = 'btn btn-danger remove-button';
            removeButton.textContent = 'Remove';
            removeButton.addEventListener('click', () => {
              // Remove the corresponding image and cropper
              const index = croppers.indexOf(cropper);
              if (index !== -1) {
                croppers.splice(index, 1);
                croppedImagesData.splice(index, 1);
              }
              containerDiv.remove();
            });

            containerDiv.appendChild(saveButton);
            containerDiv.appendChild(removeButton);

            imageContainer.appendChild(containerDiv);
            croppers.push(cropper);
          };
        };

        reader.readAsDataURL(file);
      }
    });

  // Handle form submission (for adding product)
  document.querySelector('form').addEventListener('submit', async (event) => {
    // Add the cropped image data to the form data
    croppedImagesData.forEach((croppedImageData, index) => {
      const hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = `croppedImages[${index}]`;
      hiddenInput.value = croppedImageData;
      document.querySelector('form').appendChild(hiddenInput);
    });

    // ... Your existing form submission logic ...

    // Optionally, you can also reset the croppers and image containers
    resetCroppersAndContainers();
  });

  // Function to reset croppers and containers
  function resetCroppersAndContainers() {
    // Reset the croppers array
    croppers = [];

    // Remove all child elements from the imageContainer
    while (imageContainer.firstChild) {
      imageContainer.removeChild(imageContainer.firstChild);
    }

    // Clear the file input
    const fileInput = document.getElementById('image');
    fileInput.value = '';

    // Clear the cropped image data array
    croppedImagesData = [];
  }
</script>


<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.querySelector('form');

    form.addEventListener('submit', function (event) {
      let isValid = true;

      // Check Product Name
      const productName = document.getElementById('Productname').value;
      if (productName.trim() === '') {
        displayError('Product Name is required', 'Productname');
        isValid = false;
      }

      // Check Category
      const category = document.getElementById('Category').value;
      if (category === 'option1') {
        displayError('Please select a category', 'Category');
        isValid = false;
      }

      // Check Price
      const price = document.getElementById('Price').value;
      if (price.trim() === '' || isNaN(price)|| price < 0 ) {
        displayError('Enter a valid price', 'Price');
        isValid = false;
      }

      // Check Rating
      const rating = document.getElementById('Rating').value;
      if (rating.trim() === '' || isNaN(rating) || rating < 0 || rating > 5) {
        displayError('Enter a valid rating between 0 and 5', 'Rating');
        isValid = false;
      }

      // Check Model
      const model = document.getElementById('Model').value;
      if (model.trim() === '') {
        displayError('Model is required', 'Model');
        isValid = false;
      }

      // Check Description
      const description = document.getElementById('Description').value;
      if (description.trim() === '') {
        displayError('Description is required', 'Description');
        isValid = false;
      }

        // Check Stock
        const stock = document.getElementById('Stock').value;
      if (stock.trim() === '' || isNaN(stock) || stock < 0) {
        displayError('Enter a valid stock quantity', 'Stock');
        isValid = false;
      }
      
      // Check Image URL
      // const image = document.getElementById('image').value;
      // if (image.trim() === '') {
      //   displayError('Image URL is required', 'image');
      //   isValid = false;
      // }

      // Check Is Listed checkbox
      const isListed = document.getElementById('isListed').checked;
      if (!isListed) {
        displayError('Please check "Is Listed"', 'isListed');
        isValid = false;
      }

      if (!isValid) {
        event.preventDefault(); // Prevent form submission if validation fails
      }
    });

    function displayError(message, elementId) {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'invalid-feedback';
      errorDiv.innerHTML = message;

      const element = document.getElementById(elementId);
      element.classList.add('is-invalid');
      element.parentNode.appendChild(errorDiv);
    }
  });
</script>


